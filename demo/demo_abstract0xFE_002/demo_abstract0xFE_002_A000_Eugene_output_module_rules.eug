PartType output;
PartType scar;
PartType promoter;

output YFP(.SEQUENCE("CTGAAGCTGTCACCGGATGTGCTTTCCGGTCTGATGAGTCCGTGAGGACGAAACAGCCTCTACAAATAATTTTGTTTAATACTAGAGAAAGAGGGGAAATACTAGATGGTGAGCAAGGGCGAGGAGCTGTTCACCGGGGTGGTGCCCATCCTGGTCGAGCTGGACGGCGACGTAAACGGCCACAAGTTCAGCGTGTCCGGCGAGGGCGAGGGCGATGCCACCTACGGCAAGCTGACCCTGAAGTTCATCTGCACCACAGGCAAGCTGCCCGTGCCCTGGCCCACCCTCGTGACCACCTTCGGCTACGGCCTGCAATGCTTCGCCCGCTACCCCGACCACATGAAGCTGCACGACTTCTTCAAGTCCGCCATGCCCGAAGGCTACGTCCAGGAGCGCACCATCTTCTTCAAGGACGACGGCAACTACAAGACCCGCGCCGAGGTGAAGTTCGAGGGCGACACCCTGGTGAACCGCATCGAGCTGAAGGGCATCGACTTCAAGGAGGACGGCAACATCCTGGGGCACAAGCTGGAGTACAACTACAACAGCCACAACGTCTATATCATGGCCGACAAGCAGAAGAACGGCATCAAGGTGAACTTCAAGATCCGCCACAACATCGAGGACGGCAGCGTGCAGCTCGCCGACCACTACCAGCAGAACACCCCAATCGGCGACGGCCCCGTGCTGCTGCCCGACAACCACTACCTTAGCTACCAGTCCGCCCTGAGCAAAGACCCCAACGAGAAGCGCGATCACATGGTCCTGCTGGAGTTCGTGACCGCCGCCGGGATCACTCTCGGCATGGACGAGCTGTACAAGTAACTCGGTACCAAATTCCAGAAAAGAGGCCTCCCGAAAGGGGGGCCTTTTTTCGTTTTGGTCC"));
promoter pAmtR(.SEQUENCE("CTTGTCCAACCAAATGATTCGTTACCAATTGACAGTTTCTATCGATCTATAGATAATGCTAGC"));
promoter pPhlF(.SEQUENCE("CGACGTACGGTGGAAtctgattcgttaccaattgacATGATACGAAACGTACCGTATCGTTAAGGT"));
scar Cscar(.SEQUENCE("aatg"));
scar Escar(.SEQUENCE("gctt"));

Device YFP_device(
   promoter,
   promoter,
   YFP
);

Rule YFP_rules ( ON YFP_device:
   CONTAINS pAmtR AND 
   CONTAINS pPhlF AND 
   STARTSWITH pPhlF AND 
   pPhlF BEFORE pAmtR AND
   ALL_FORWARD
);


YFP_devices     = product(YFP_device);

Device gate_YFP();

Device circuit();

Rule allRules( ON circuit:
   gate_YFP     EXACTLY 1 AND 
   ALL_FORWARD AND 
   Escar        EXACTLY 1 AND 
   Cscar        EXACTLY 1 AND 
   FORWARD Escar AND 
   FORWARD Cscar AND 
   [0] EQUALS Escar AND 
   [2] EQUALS Cscar
);

Array allResults;

for(num i1=0;  i1<sizeof(YFP_devices);     i1=i1+1) {

gate_YFP     = YFP_devices[i1];

Device circuit(
   gate_YFP,
   Escar,
   Cscar
);

result = permute(circuit);

allResults = allResults + result;

}
