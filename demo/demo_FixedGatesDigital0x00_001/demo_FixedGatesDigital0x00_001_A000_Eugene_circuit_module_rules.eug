PartType output;
PartType rbs;
PartType cds;
PartType scar;
PartType promoter;
PartType terminator;
PartType ribozyme;

cds DigiJ(.SEQUENCE("ATGGAC"));
cds DigiJQ(.SEQUENCE("ATGGACACJT"));
cds PhlF(.SEQUENCE("ATGGCACGTACCCCGAGCCGTAGCAGCATTGGTAGCCTGCGTAGTCCGCATACCCATAAAGCAATTCTGACCAGCACCATTGAAATCCTGAAAGAATGTGGTTATAGCGGTCTGAGCATTGAAAGCGTTGCACGTCGTGCCGGTGCAAGCAAACCGACCATTTATCGTTGGTGGACCAATAAAGCAGCACTGATTGCCGAAGTGTATGAAAATGAAAGCGAACAGGTGCGTAAATTTCCGGATCTGGGTAGCTTTAAAGCCGATCTGGATTTTCTGCTGCGTAATCTGTGGAAAGTTTGGCGTGAAACCATTTGTGGTGAAGCATTTCGTTGTGTTATTGCAGAAGCACAGCTGGACCCTGCAACCCTGACCCAGCTGAAAGATCAGTTTATGGAACGTCGTCGTGAGATGCCGAAAAAACTGGTTGAAAATGCCATTAGCAATGGTGAACTGCCGAAAGATACCAATCGTGAACTGCTGCTGGATATGATTTTTGGTTTTTGTTGGTATCGCCTGCTGACCGAACAGCTGACCGTTGAACAGGATATTGAAGAATTTACCTTCCTGCTGATTAATGGTGTTTGTCCGGGTACACAGCGTTAA"));
cds QacR(.SEQUENCE("ATGAACCTGAAAGATAAAATTCTGGGCGTTGCCAAAGAACTGTTTATCAAAAATGGCTATAACGCAACCACCACCGGTGAAATTGTTAAACTGAGCGAAAGCAGCAAAGGCAATCTGTATTATCACTTTAAAACCAAAGAGAACCTGTTTCTGGAAATCCTGAACATCGAAGAAAGCAAATGGCAAGAGCAGTGGAAAAAAGAACAAATCAAATGCAAAACCAACCGCGAGAAATTCTATCTGTATAATGAACTGAGCCTGACCACCGAATATTACTATCCGCTGCAGAATGCCATCATCGAGTTTTATACCGAGTACTATAAAACCAACAGCATCAACGAGAAAATGAACAAACTGGAAAACAAATACATCGATGCCTACCACGTGATCTTTAAAGAAGGTAATCTGAACGGCGAATGGTGCATTAATGATGTTAATGCCGTGAGCAAAATTGCAGCAAATGCCGTTAATGGCATTGTTACCTTTACCCATGAGCAGAATATCAACGAACGCATTAAACTGATGAACAAATTCAGCCAGATCTTTCTGAATGGCCTGAGCAAATAA"));
cds SrpR(.SEQUENCE("ATGGCACGTAAAACCGCAGCAGAAGCAGAAGAAACCCGTCAGCGTATTATTGATGCAGCACTGGAAGTTTTTGTTGCACAGGGTGTTAGTGATGCAACCCTGGATCAGATTGCACGTAAAGCCGGTGTTACCCGTGGTGCAGTTTATTGGCATTTTAATGGTAAACTGGAAGTTCTGCAGGCAGTTCTGGCAAGCCGTCAGCATCCGCTGGAACTGGATTTTACACCGGATCTGGGTATTGAACGTAGCTGGGAAGCAGTTGTTGTTGCAATGCTGGATGCAGTTCATAGTCCGCAGAGCAAACAGTTTAGCGAAATTCTGATTTATCAGGGTCTGGATGAAAGCGGTCTGATTCATAATCGTATGGTTCAGGCAAGCGATCGTTTTCTGCAGTATATTCATCAGGTTCTGCGTCATGCAGTTACCCAGGGTGAACTGCCGATTAATCTGGATCTGCAGACCAGCATTGGTGTTTTTAAAGGTCTGATTACCGGTCTGCTGTATGAAGGTCTGCGTAGCAAAGATCAGCAGGCACAGATTATCAAAGTTGCACTGGGTAGCTTTTGGGCACTGCTGCGTGAACCGCCTCGTTTTCTGCTGTGTGAAGAAGCACAGATTAAACAGGTGAAATCCTTCGAATAA"));
output YFP(.SEQUENCE("CTGAAGCTGTCACCGGATGTGCTTTCCGGTCTGATGAGTCCGTGAGGACGAAACAGCCTCTACAAATAATTTTGTTTAATACTAGAGAAAGAGGGGAAATACTAGATGGTGAGCAAGGGCGAGGAGCTGTTCACCGGGGTGGTGCCCATCCTGGTCGAGCTGGACGGCGACGTAAACGGCCACAAGTTCAGCGTGTCCGGCGAGGGCGAGGGCGATGCCACCTACGGCAAGCTGACCCTGAAGTTCATCTGCACCACAGGCAAGCTGCCCGTGCCCTGGCCCACCCTCGTGACCACCTTCGGCTACGGCCTGCAATGCTTCGCCCGCTACCCCGACCACATGAAGCTGCACGACTTCTTCAAGTCCGCCATGCCCGAAGGCTACGTCCAGGAGCGCACCATCTTCTTCAAGGACGACGGCAACTACAAGACCCGCGCCGAGGTGAAGTTCGAGGGCGACACCCTGGTGAACCGCATCGAGCTGAAGGGCATCGACTTCAAGGAGGACGGCAACATCCTGGGGCACAAGCTGGAGTACAACTACAACAGCCACAACGTCTATATCATGGCCGACAAGCAGAAGAACGGCATCAAGGTGAACTTCAAGATCCGCCACAACATCGAGGACGGCAGCGTGCAGCTCGCCGACCACTACCAGCAGAACACCCCAATCGGCGACGGCCCCGTGCTGCTGCCCGACAACCACTACCTTAGCTACCAGTCCGCCCTGAGCAAAGACCCCAACGAGAAGCGCGATCACATGGTCCTGCTGGAGTTCGTGACCGCCGCCGGGATCACTCTCGGCATGGACGAGCTGTACAAGTAACTCGGTACCAAATTCCAGAAAAGAGGCCTCCCGAAAGGGGGGCCTTTTTTCGTTTTGGTCC"));
promoter pBAD(.SEQUENCE("ACTTTTCATACTCCCGCCATTCAGAGAAGAAACCAATTGTCCATATTGCATCAGACATTGCCGTCACTGCGTCTTTTACTGGCTCTTCTCGCTAACCAAACCGGTAACCCCGCTTATTAAAAGCATTCTGTAACAAAGCGGGACCAAAGCCATGACAAAAACGCGTAACAAAAGTGTCTATAATCACGGCAGAAAAGTCCACATTGATTATTTGCACGGCGTCACACTTTGCTATGCCATAGCATTTTTATCCATAAGATTAGCGGATCCTACCTGACGCTTTTTATCGCAACTCTCTACTGTTTCTCCATACCCGTTTTTTTGGGCTAGC"));
promoter pDigital(.SEQUENCE("TCTATGATTTTGTTTGTAAAC"));
promoter pDigitalQS(.SEQUENCE("TTTTGTTTGTAAAC"));
promoter pPhlF(.SEQUENCE("CGACGTACGGTGGAAtctgattcgttaccaattgacATGATACGAAACGTACCGTATCGTTAAGGT"));
promoter pQacR(.SEQUENCE("ggtatggaagctatacgttaccaattgacagctagctcagtccTACTTTAGTATATAGACCGTGCGATCGGTCTATA"));
promoter pSrpR(.SEQUENCE("TCTATGATTGGTCCAGATTCGTTACCAATTGACAGCTAGCTCAGTCCTAGGTATATACATACATGCTTGTTTGTTTGTAAAC"));
promoter pTac(.SEQUENCE("AACGATCGTTGGCTGTGTTGACAATTAATCATCGGCTCGTATAATGTGTGGAATTGTGAGCGCTCACAATT"));
promoter pTet(.SEQUENCE("TACTCCACCGTTGGCTTTTTTCCCTATCAGTGATAGAGATTGACATCCCTATCAGTGATAGAGATAATGAGCAC"));
rbs DigiJQ_RBS(.SEQUENCE("TCAACATAAA"));
rbs DigiJ_RBS(.SEQUENCE("TCAACAT"));
rbs P1(.SEQUENCE("CTATGGACTATGTTTGAAAGGGAGAAATACTAG"));
rbs P2(.SEQUENCE("GGAGCTATGGACTATGTTTGAAAGGCTGAAATACTAG"));
rbs Q1(.SEQUENCE("GTAAGCCATGCCATTGGCTTTTGATAGAGGATAACTACTAG"));
rbs S2(.SEQUENCE("GAGTCTATGGACTATGTTTTCACATATGAGATACCAGG"));
ribozyme RiboJ10(.SEQUENCE("CTGAAGCGCTCAACGGGTGTGCTTCCCGTTCTGATGAGTCCGTGAGGACGAAAGCGCCTCTACAAATAATTTTGTTTAA"));
ribozyme RiboJ53(.SEQUENCE("CTGAAGCGGTCAACGCATGTGCTTTGCGTTCTGATGAGACAGTGATGTCGAAACCGCCTCTACAAATAATTTTGTTTAA"));
ribozyme RiboJ60(.SEQUENCE("CTGAAGTCGTCAAGTGCTGTGCTTGCACTTCTGATGAGGCAGTGATGCCGAAACGACCTCTACAAATAATTTTGTTTAA"));
scar Ascar(.SEQUENCE("ggag"));
scar Bscar(.SEQUENCE("tacg"));
scar Cscar(.SEQUENCE("aatg"));
scar Dscar(.SEQUENCE("aggt"));
scar Escar(.SEQUENCE("gctt"));
scar Fscar(.SEQUENCE("cgct"));
scar Uscar(.SEQUENCE("gggc"));
scar Vscar(.SEQUENCE("tctg"));
scar Xscar(.SEQUENCE("tgtc"));
scar Yscar(.SEQUENCE("attg"));
terminator ECK120010818(.SEQUENCE("GTCAGTTTCACCTGTTTTACGTAAAAACCCGCTTCGGCGGGTTTTTACTTTTGG"));
terminator ECK120029600(.SEQUENCE("TTCAGCCAAAAAACTTAAGACCGCCGGTCTTGTCCACTACCTTGCAGTAATGCGGTGGACAGGATCGGCGGTTTTCTTTTCTCTTCTCAA"));
terminator ECK120033737(.SEQUENCE("ggaaacacagAAAAAAGCCCGCACCTGACAGTGCGGGCTTTTTTTTTcgaccaaagg"));

Device YFP_device(
   promoter,
   YFP
);
Device SrpR_device(
   promoter,
   promoter,
   RiboJ10,
   S2,
   SrpR,
   ECK120029600
);
Device PhlF_device(
   promoter,
   RiboJ53,
   P2,
   PhlF,
   ECK120033737
);
Device QacR_device(
   promoter,
   RiboJ60,
   Q1,
   QacR,
   ECK120010818
);
Device PhlF_1_device(
   promoter,
   promoter,
   RiboJ53,
   P1,
   PhlF,
   ECK120033737
);
Device DigiJ_device(
   promoter,
   DigiJ,
   DigiJ_RBS
);
Device QacR_1_device(
   promoter,
   promoter,
   RiboJ60,
   Q1,
   QacR,
   ECK120010818
);
Device DigiJQ_device(
   promoter,
   DigiJQ,
   DigiJQ_RBS
);
Device SrpR_1_device(
   promoter,
   promoter,
   RiboJ10,
   S2,
   SrpR,
   ECK120029600
);

Rule YFP_rules ( ON YFP_device:
   CONTAINS pSrpR AND
   ALL_FORWARD
);
Rule SrpR_rules ( ON SrpR_device:
   CONTAINS pBAD AND 
   CONTAINS pTet AND
   ALL_FORWARD
);
Rule PhlF_rules ( ON PhlF_device:
   CONTAINS pBAD AND
   ALL_FORWARD
);
Rule QacR_rules ( ON QacR_device:
   CONTAINS pTac AND
   ALL_FORWARD
);
Rule PhlF_1_rules ( ON PhlF_1_device:
   CONTAINS pPhlF AND 
   CONTAINS pDigitalQS AND
   ALL_FORWARD
);
Rule DigiJ_rules ( ON DigiJ_device:
   CONTAINS pTet AND
   ALL_FORWARD
);
Rule QacR_1_rules ( ON QacR_1_device:
   CONTAINS pDigital AND 
   CONTAINS pQacR AND
   ALL_FORWARD
);
Rule DigiJQ_rules ( ON DigiJQ_device:
   CONTAINS pQacR AND
   ALL_FORWARD
);
Rule SrpR_1_rules ( ON SrpR_1_device:
   CONTAINS pSrpR AND 
   CONTAINS pPhlF AND
   ALL_FORWARD
);


YFP_devices     = product(YFP_device);
SrpR_devices    = product(SrpR_device);
PhlF_devices    = product(PhlF_device);
QacR_devices    = product(QacR_device);
PhlF_1_devices  = product(PhlF_1_device);
DigiJ_devices   = product(DigiJ_device);
QacR_1_devices  = product(QacR_1_device);
DigiJQ_devices  = product(DigiJQ_device);
SrpR_1_devices  = product(SrpR_1_device);

Device gate_YFP();
Device gate_SrpR();
Device gate_PhlF();
Device gate_QacR();
Device gate_PhlF_1();
Device gate_DigiJ();
Device gate_QacR_1();
Device gate_DigiJQ();
Device gate_SrpR_1();

Device circuit();

Rule allRules( ON circuit:
   gate_YFP     EXACTLY 1 AND 
   gate_SrpR    EXACTLY 1 AND 
   gate_PhlF    EXACTLY 1 AND 
   gate_QacR    EXACTLY 1 AND 
   gate_PhlF_1  EXACTLY 1 AND 
   gate_DigiJ   EXACTLY 1 AND 
   gate_QacR_1  EXACTLY 1 AND 
   gate_DigiJQ  EXACTLY 1 AND 
   gate_SrpR_1  EXACTLY 1 AND 
   Escar        EXACTLY 1 AND 
   Xscar        EXACTLY 1 AND 
   Vscar        EXACTLY 1 AND 
   Uscar        EXACTLY 1 AND 
   Fscar        EXACTLY 1 AND 
   Dscar        EXACTLY 1 AND 
   Bscar        EXACTLY 1 AND 
   Ascar        EXACTLY 1 AND 
   Yscar        EXACTLY 1 AND 
   Cscar        EXACTLY 1 AND 
   FORWARD Escar AND 
   FORWARD Xscar AND 
   FORWARD Vscar AND 
   FORWARD Uscar AND 
   FORWARD Fscar AND 
   FORWARD Dscar AND 
   FORWARD Bscar AND 
   FORWARD Ascar AND 
   FORWARD Yscar AND 
   FORWARD Cscar AND 
   [0] EQUALS Escar AND 
   [2] EQUALS Xscar AND 
   [4] EQUALS Vscar AND 
   [6] EQUALS Uscar AND 
   [8] EQUALS Fscar AND 
   [10] EQUALS Dscar AND 
   [12] EQUALS Bscar AND 
   [14] EQUALS Ascar AND 
   [16] EQUALS Yscar AND 
   [18] EQUALS Cscar
);

Array allResults;

for(num i1=0;  i1<sizeof(YFP_devices);     i1=i1+1) {
for(num i2=0;  i2<sizeof(SrpR_devices);    i2=i2+1) {
for(num i3=0;  i3<sizeof(PhlF_devices);    i3=i3+1) {
for(num i4=0;  i4<sizeof(QacR_devices);    i4=i4+1) {
for(num i5=0;  i5<sizeof(PhlF_1_devices);  i5=i5+1) {
for(num i6=0;  i6<sizeof(DigiJ_devices);   i6=i6+1) {
for(num i7=0;  i7<sizeof(QacR_1_devices);  i7=i7+1) {
for(num i8=0;  i8<sizeof(DigiJQ_devices);  i8=i8+1) {
for(num i9=0;  i9<sizeof(SrpR_1_devices);  i9=i9+1) {

gate_YFP     = YFP_devices[i1];
gate_SrpR    = SrpR_devices[i2];
gate_PhlF    = PhlF_devices[i3];
gate_QacR    = QacR_devices[i4];
gate_PhlF_1  = PhlF_1_devices[i5];
gate_DigiJ   = DigiJ_devices[i6];
gate_QacR_1  = QacR_1_devices[i7];
gate_DigiJQ  = DigiJQ_devices[i8];
gate_SrpR_1  = SrpR_1_devices[i9];

Device circuit(
   gate_YFP,
   gate_SrpR,
   gate_PhlF,
   gate_QacR,
   gate_PhlF_1,
   gate_DigiJ,
   gate_QacR_1,
   gate_DigiJQ,
   gate_SrpR_1,
   Escar,
   Xscar,
   Vscar,
   Uscar,
   Fscar,
   Dscar,
   Bscar,
   Ascar,
   Yscar,
   Cscar
);

result = permute(circuit);

allResults = allResults + result;

}
}
}
}
}
}
}
}
}
